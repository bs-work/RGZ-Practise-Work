import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { LocationService } from '../location/location.service';
import { CardModel, CardService } from '../form-card/card.service';
import { ChangeDetectorRef } from '@angular/core';

@Component({
  selector: 'app-form-card',
  standalone: true,
  imports: [FormsModule, CommonModule],
  templateUrl: './form-card.component.html',
  styleUrls: ['./form-card.component.css'],
})
export class FormCardComponent implements OnInit {
  cards: any[] = [];
  locationOptions: { id: number; state: string }[] = [];
  addCardErrorMessage: string = '';
  isAddNewDisabled: boolean = false;
  editDisabled: boolean = false;

  constructor(
    private locationService: LocationService,
    private cardService: CardService,
    private cdr: ChangeDetectorRef
  ) {}

  ngOnInit(): void {
    this.loadStates();
    this.loadCards();
  }

  loadStates(): void {
    this.locationService.getLocations().subscribe(
      (locations) => {
        this.locationOptions = locations.map((location) => ({
          id: location.id,
          state: location.state,
        }));

        this.cards.forEach((card) => {
          const location = this.locationOptions.find(
            (s) => s.id === card.stateId
          );
          if (location) {
            card.state = location.state;
          }
        });

        console.log('Updated location options:', this.locationOptions);
        this.cdr.detectChanges();
      },
      (error) => {
        console.error('Error loading states:', error);
      }
    );
  }

  loadCards(): void {
    this.cardService.getCards().subscribe(
      (cards) => {
        this.cards = cards.map((card) => ({
          ...card,
          isEditing: false,
          errorMessage: '',
          filePreview: card.fileurl || '',
          stateId: card.stateId || 1,
        }));
        console.log('Cards loaded:', this.cards);
        this.cdr.detectChanges();
      },
      (error) => {
        console.error('Error loading cards:', error);
      }
    );
  }

  addNewCard() {
    if (this.cards.some((card) => card.isEditing)) {
      this.isAddNewDisabled = true;
      return;
    }
    this.addCardErrorMessage = '';
    this.isAddNewDisabled = false;
    const newCard = {
      name: '',
      stateId: 1,
      uploadfile: '',
      isEditing: true,
      datePicker: '',
      errorMessage: '',
      fileurl: '',
    };
    this.cards.push(newCard);
  }

  isFormInvalid(card: any): boolean {
    return (
      this.isNameInvalid(card) ||
      this.isStateInvalid(card) ||
      this.isDateInvalid(card) ||
      this.isUploadfileInvalid(card)
    );
  }

  isNameInvalid(card: any): boolean {
    return card.errorMessage && (!card.name || /\d/.test(card.name));
  }

  isStateInvalid(card: any): boolean {
    return card.errorMessage && !card.stateId;
  }

  isDateInvalid(card: any): boolean {
    return card.errorMessage && !card.datePicker;
  }

  isUploadfileInvalid(card: any): boolean {
    return card.errorMessage && !card.uploadfile;
  }

  editCard(index: number) {
    const cardToEdit = this.cards[index];
    if (this.cards.some((card) => card.isEditing && card !== cardToEdit)) {
      return;
    }
    this.cards.forEach((card, i) => (card.isEditing = i === index));
    cardToEdit.errorMessage = '';
    this.isAddNewDisabled = true;
    if (cardToEdit.id) {
      this.originalCardValues = { ...cardToEdit };
      this.cardService.getCardById(cardToEdit.id).subscribe(
        (cardData) => {
          if (cardData) {
            Object.assign(cardToEdit, cardData);
            cardToEdit.isEditing = true;
            console.log('Card Edit Filled:', cardToEdit);
            this.cdr.detectChanges();
          }
        },
        (error) => {
          console.error('Error loading card data:', error);
        }
      );
    } else {
      cardToEdit.isEditing = true;
    }

    this.isAddNewDisabled = true;
  }

  saveCard(index: number): void {
    const card = this.cards[index];
    let hasError = false;

    card.nameError = '';
    card.stateError = '';
    card.datePickerError = '';
    card.uploadfileError = '';

    if (!card.name || /\d/.test(card.name)) {
      card.nameError = 'Please fill in all fields before saving.';
      hasError = true;
    } else if (this.cards.some((c, i) => c.name === card.name && i !== index)) {
      card.nameError =
        'This name is already added. Please choose a different name.';
      hasError = true;
    }
    if (!card.stateId) {
      card.stateError = 'State is required.';
      hasError = true;
    }
    if (!card.datePicker) {
      card.datePickerError = 'Date is required.';
      hasError = true;
    }
    if (!card.uploadfile) {
      card.uploadfileError = 'File upload is required.';
      hasError = true;
    }

    if (hasError) {
      return;
    }

    const cardData: CardModel = {
      id: card.id,
      name: card.name,
      stateId: card.stateId,
      state: card.state,
      datePicker: card.datePicker,
      uploadfile: card.uploadfile,
      fileurl: card.fileurl,
      isActive: true,
    };

    const saveObservable = card.id
      ? this.cardService.updateCard(cardData)
      : this.cardService.addCard(cardData);

    saveObservable.subscribe(
      (response: any) => {
        if (!card.id && typeof response === 'object' && 'id' in response) {
          card.id = response.id;
        }
        card.isEditing = false;
        this.isAddNewDisabled = false;
        this.addCardErrorMessage = '';
        console.log('Card saved successfully');
        this.cdr.detectChanges();
        this.loadStates();
        this.loadCards();
        this.cards[index].state = cardData.state;
        this.cdr.detectChanges();
      },
      (error) => {
        console.error('Error saving card:', error);
        this.addCardErrorMessage = 'Failed to save card. Please try again.';
      }
    );
  }

  deleteCard(index: number) {
    const card = this.cards[index];
    if (card.id) {
      this.cardService.deleteCard(card.id).subscribe(
        () => {
          this.cards.splice(index, 1);
          this.cdr.detectChanges();
          this.isAddNewDisabled = this.cards.some((card) => card.isEditing);
          if (!this.isAddNewDisabled) {
            this.addCardErrorMessage = '';
          }
          console.log('Card deleted:', card);
        },
        (error) => {
          card.errorMessage = 'Error deleting card.';
          console.error('Error deleting card:', error);
        }
      );
    } else {
      this.cards.splice(index, 1);
      this.isAddNewDisabled = this.cards.some((card) => card.isEditing);
    }
  }

  onFileChange(event: Event, index: number) {
    const input = event.target as HTMLInputElement;
    const file = input.files?.[0];
    if (file) {
      const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
      if (!validTypes.includes(file.type)) {
        this.cards[index].errorMessage =
          'Invalid file type. Please upload an image (JPEG, PNG, GIF).';
        return;
      }

      this.cardService.uploadFile(file).subscribe(
        (fileUrl: string) => {
          this.cards[index].filePreview = fileUrl;
          this.cards[index].uploadfile = file.name;
          this.cards[index].fileurl = fileUrl;
          this.cards[index].errorMessage = '';
        },
        (error: any) => {
          console.error('File upload failed:', error);
          this.cards[index].errorMessage =
            'File upload failed. Please try again.';
        }
      );
    } else {
      console.error('No file selected');
    }
  }

  isOptionDisabled(option: string): boolean {
    return this.cards.some((card) => card.state === option);
  }

  openPreview(card: any, _index: number) {
    const newTab = window.open();
    if (newTab) {
      newTab.document.write(`
        <html>
          <head>
            <title>Preview</title>
            <style>
              body { font-family: Arial, sans-serif; }
              img { max-width: 50%; height: auto; }
            </style>
          </head>
          <body>
            <h1>Preview for ${card.name}</h1>
            <p><strong>State:</strong> ${card.state}</p>
            <p><strong>Date:</strong> ${card.datePicker}</p>
            <p><strong>UploadFile:</strong> ${card.uploadfile}</p>
            ${
              card.filePreview
                ? `<img src="${card.fileurl}" alt="File Preview" />`
                : ''
            }
          </body>
        </html>
      `);
      newTab.document.close();
    } else {
      console.error(
        'Failed to open new tab. Please check your browser settings.'
      );
    }
  }

  originalCardValues: any;

  cancelCard(index: number): void {
    const card = this.cards[index];
    if (!card.id) {
      this.cards.splice(index, 1);
    } else {
      Object.assign(card, this.originalCardValues);
      card.isEditing = false;
    }
    this.isAddNewDisabled = false;
  }
}



card model

using Microsoft.VisualBasic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace CRUD_with_card.Model
{
    public class LocationModel
    {
        public int Id { get; set; }
        public required string State { get; set; }
        public required string City { get; set; }
        public required string Address { get; set; }
        public required int Zipcode { get; set; }
        public required int Postalcode { get; set; }
        public bool IsActive { get; set; } = true;
    }

    public class CardModel
    {
        [Required(ErrorMessage = "Id is required.")]
        public int Id { get; set; }
        [Required(ErrorMessage = "Name is required.")]
        public string Name { get; set; }
        //[Required(ErrorMessage = "Location is required.")]
        //public int LocationId { get; set; }
        public int StateId { get; set; } 
        [Required(ErrorMessage = "State is required.")]
        public string State { get; set; }
        [Required(ErrorMessage = "DatePicker is required.")]
        public DateOnly DatePicker { get; set; }
        [Required(ErrorMessage = "Uploadfile is required.")]
        public string Uploadfile { get; set; }
        [Required(ErrorMessage = "Fileurl is required.")]
        public string Fileurl { get; set; }
        public bool IsActive { get; set; }
    }

    //public class UpdateStateRequest
    //{
    //    public int LocationId { get; set; }
    //    public string NewState { get; set; }
    //}
}


location controller


using CRUD_with_card.Layer;
using CRUD_with_card.Model;
using Microsoft.AspNetCore.Mvc;

namespace CRUD_with_card.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class LocationController : ControllerBase
    {
        private readonly LocationLayer _locationLayer;

        public LocationController(LocationLayer locationLayer)
        {
            _locationLayer = locationLayer;
        }

        // api/location
        [HttpGet]
        public async Task<ActionResult<IEnumerable<LocationModel>>> GetLocations()
        {
            var locations = await _locationLayer.GetLocationsAsync();
            return Ok(locations);
        }

        // api/location/id
        [HttpGet("{id}")]

        public async Task<ActionResult<LocationModel>> GetLocation(int id)
        {
            var location = await _locationLayer.GetLocationByIdAsync(id);
            if (location == null)
            {
                return NotFound();
            }
            return Ok(location);
        }
    
        // POST: api/location
        [HttpPost]
        public async Task<ActionResult<LocationModel>> CreateLocation(LocationModel location)
        {
            var result = await _locationLayer.AddLocationAsync(location);
            if (result > 0)
            {
                return CreatedAtAction(nameof(GetLocation), new { location.Id }, location);
            }
            return BadRequest("Could not create location.");
        }

        // PUT: api/location/id
        [HttpPut("{id}")]   
        public async Task<ActionResult> UpdateLocation(int id, LocationModel location)
        {
            if (id != location.Id )
            {
                return BadRequest();
            }

            var result = await _locationLayer.UpdateLocationAsync(location);
            if (result > 0)
            {
                return NoContent();
            }
            return NotFound();
        }

        // DELETE: api/location/id  
        [HttpDelete("{id}")]
        public async Task<ActionResult> DeleteLocation(int id)
        {
            var result = await _locationLayer.DeleteLocationAsync(id);
            if (result > 0)
            {
                return NoContent();
            }
            return NotFound();
        }

        //[HttpPut("updateStateFromLocation")]
        //public async Task<ActionResult> UpdateStateFromLocation(int locationId, string state)
        //{
        //    await _locationLayer.UpdateStateFromLocationAsync(locationId, state);
        //    return NoContent();
        //}
    }
}


using Microsoft.Data.SqlClient;
using CRUD_with_card.Model;
using Dapper;

namespace CRUD_with_card.Layer
{
    public class LocationLayer
    {
        private readonly string _connectionString;  

        public LocationLayer(IConfiguration configuration)
        {
            _connectionString = configuration.GetConnectionString("LocMaster");
        }

        public async Task<IEnumerable<LocationModel>> GetLocationsAsync()
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var query = "SELECT * FROM Location WHERE IsActive = 1"; 
                return await connection.QueryAsync<LocationModel>(query);
            }
        }

        public async Task<LocationModel> GetLocationByIdAsync(int id)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var query = "SELECT * FROM Location WHERE Id = @Id AND IsActive = 1";
                return await connection.QueryFirstOrDefaultAsync<LocationModel>(query, new { Id = id });
            }
        }
    
        public async Task<int> AddLocationAsync(LocationModel location)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                location.IsActive = true; 
                var query = "INSERT INTO Location (State, City, Address, Zipcode, Postalcode, IsActive) VALUES (@State, @City, @Address, @Zipcode, @Postalcode, @IsActive)";
                return await connection.ExecuteAsync(query, location);
            }
        }

        public async Task<int> UpdateLocationAsync(LocationModel location)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var query = "UPDATE Location SET State = @State, City = @City, Address = @Address, Zipcode = @Zipcode, Postalcode = @Postalcode WHERE Id = @Id";
                return await connection.ExecuteAsync(query, location);
            }
        }

        //public async Task<int> UpdateLocationAsync(LocationModel location)
        //{
        //    using (var connection = new SqlConnection(_connectionString))
        //    {
        //        await connection.OpenAsync();

        //        var updateLocationQuery = "UPDATE Location SET State = @State, City = @City, Address = @Address, Zipcode = @Zipcode, Postalcode = @Postalcode WHERE Id = @Id";
        //        var updateCardQuery = "UPDATE Card SET State = @State WHERE LocationId = @Id";

        //        using (var transaction = connection.BeginTransaction())
        //        {
        //            try
        //            {
        //                await connection.ExecuteAsync(updateLocationQuery, location, transaction);
        //                await connection.ExecuteAsync(updateCardQuery, new { State = location.State, Id = location.Id }, transaction);
        //                transaction.Commit();
        //            }
        //            catch
        //            {
        //                transaction.Rollback();
        //                throw;
        //            }
        //        }

        //        return 1;
        //    }
        //}

        //public async Task<int> UpdateLocationAsync(LocationModel location)
        //{
        //    using (var connection = new SqlConnection(_connectionString))
        //    {
        //        await connection.OpenAsync();

        //        var updateLocationQuery = "UPDATE Location SET State = @State, City = @City, Address = @Address, Zipcode = @Zipcode, Postalcode = @Postalcode WHERE Id = @Id";
        //        var updateCardQuery = "UPDATE Card SET State = @State WHERE LocationId = @Id";

        //        using (var transaction = connection.BeginTransaction())
        //        {
        //            try
        //            {
        //                await connection.ExecuteAsync(updateLocationQuery, location, transaction);
        //                await connection.ExecuteAsync(updateCardQuery, new { State = location.State, Id = location.Id }, transaction);
        //                transaction.Commit();
        //            }
        //            catch
        //            {
        //                transaction.Rollback();
        //                throw;
        //            }
        //        }

        //        return 1;
        //    }
        //}

        public async Task<int> DeleteLocationAsync(int id)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var query = "UPDATE Location SET IsActive = 0 WHERE Id = @Id"; 
                return await connection.ExecuteAsync(query, new { Id = id });
            }
        }

        //public async Task UpdateStateFromLocationAsync(int locationId, string state)
        //{
        //    using (var connection = new SqlConnection(_connectionString))
        //    {
        //        var query = @"
        //        BEGIN TRANSACTION;
        //        UPDATE Location
        //        SET State = @State
        //        WHERE Id = @LocationId;
        //        UPDATE Card
        //        SET State = @State
        //        WHERE LocationId = @LocationId;
        //        COMMIT TRANSACTION;";

        //        var parameters = new { LocationId = locationId, State = state };
        //        await connection.ExecuteAsync(query, parameters);
        //    }
        //}

    }
}

card controller 


using CRUD_with_card.Layer;
using CRUD_with_card.Model;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.IO;
using System.Threading.Tasks;

namespace CRUD_with_card.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CardController : ControllerBase
    {
        private readonly CardLayer _cardLayer;
        private readonly string _fileUploadPath = Path.Combine(Directory.GetCurrentDirectory(), "UploadedFiles");  


        public CardController(CardLayer cardLayer)
        {
            _cardLayer = cardLayer;

            if (!Directory.Exists(_fileUploadPath))
            {
                Directory.CreateDirectory(_fileUploadPath);
            }
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<CardModel>>> GetCards()
        {
            var cards = await _cardLayer.GetCardsAsync();
            return Ok(cards);
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<CardModel>> GetCard(int id)
        {
            var card = await _cardLayer.GetCardByIdAsync(id);
            if (card == null)
            {
                return NotFound();
            }
            return Ok(card);
        }

        [HttpPost]
        public async Task<ActionResult<CardModel>> CreateCard(CardModel card)
        {
            var result = await _cardLayer.AddCardAsync(card);
            if (result > 0)
            {
                return CreatedAtAction(nameof(GetCard), new { card.Id }, card);
            }
            return BadRequest("Could not create card.");
        }

        [HttpPut("{id}")]
        public async Task<ActionResult> UpdateCard(int id, CardModel card)
        {
            if (id != card.Id)
            {
                return BadRequest();
            }

            var result = await _cardLayer.UpdateCardAsync(card);
            if (result > 0)
            {
                return NoContent();
            }
            return NotFound();
        }

        [HttpDelete("{id}")]
        public async Task<ActionResult> DeleteCard(int id)
        {
            var result = await _cardLayer.DeleteCardAsync(id);
            if (result > 0)
            {
                return NoContent();
            }
            return NotFound();
        }

        [HttpPost("upload")]
        public async Task<ActionResult<string>> UploadFile(IFormFile file)
        {
            if (file == null || file.Length == 0)
            {
                return BadRequest("No file uploaded.");
            }

            var filePath = Path.Combine(_fileUploadPath, file.FileName);
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.CopyToAsync(stream);
            }
            var fileUrl = $"{Request.Scheme}://{Request.Host}/UploadedFiles/{file.FileName}";
            return Ok(fileUrl);
        }

        //[HttpPut("updateStateFromLocation")]
        //public async Task<ActionResult> UpdateStateFromLocation(int locationId, string state)
        //{
        //    await _cardLayer.UpdateStateFromLocationAsync(locationId, state);
        //    return NoContent();
        //}

        //[HttpGet("state/{locationId}")]
        //public async Task<ActionResult<string>> GetStateByLocationId(int locationId)
        //{
        //    var state = await _cardLayer.GetStateByLocationIdAsync(locationId);
        //    if (state == null)
        //    {
        //        return NotFound();
        //    }
        //    return Ok(state);
        //}
    }
}



card layer


using Microsoft.Data.SqlClient;
using CRUD_with_card.Model;
using Microsoft.Extensions.Configuration;
using Dapper;

namespace CRUD_with_card.Layer
{
    public class CardLayer
    {
        private readonly string _connectionString;

        public CardLayer(IConfiguration configuration)
        {
            _connectionString = configuration.GetConnectionString("LocMaster");
        }

        public async Task<IEnumerable<CardModel>> GetCardsAsync()
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var query = @"
                    SELECT 
                        Card.Id,
                        Card.Name,
                        Location.State, 
                        card.State As StateId
                        Card.DatePicker,
                        Card.Uploadfile,
                        Card.Fileurl,
                        Card.IsActive
                    FROM 
                        Card
                    JOIN 
                        Location ON Card.State = Location.Id
                    WHERE 
                        Card.IsActive = 1";
                var cards = await connection.QueryAsync<dynamic>(query);
                var cardModels = cards.Select(card => new CardModel
                {
                    Id = card.Id,
                    Name = card.Name,
                    State = card.State,
                    StateId = card.StateId,
                    DatePicker = DateOnly.FromDateTime(DateTime.Parse(card.DatePicker.ToString())),
                    Uploadfile = card.Uploadfile,
                    Fileurl = card.Fileurl,
                    IsActive = card.IsActive
                });
                return cardModels;
            }
        }

        public async Task<CardModel> GetCardByIdAsync(int id)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var query = @"
                    SELECT 
                        Card.Id,
                        Card.Name,
                        Location.State,
                        Location.State As State.Id
                        Card.DatePicker,
                        Card.Uploadfile,
                        Card.Fileurl,
                        Card.IsActive
                    FROM 
                        Card
                    JOIN 
                        Location ON Card.State = Location.Id
                    WHERE 
                        Card.Id = @Id AND Card.IsActive = 1";
                var card = await connection.QueryFirstOrDefaultAsync<dynamic>(query, new { Id = id });

                if (card != null)
                {
                    return new CardModel
                    {
                        Id = card.Id,
                        Name = card.Name,
                        State = card.State,
                        StateId = card.StateId,
                        DatePicker = DateOnly.FromDateTime(card.DatePicker),
                        Uploadfile = card.Uploadfile,
                        Fileurl = card.Fileurl,
                        IsActive = card.IsActive
                    };
                }

                return null;
            }
        }

        public async Task<int> AddCardAsync(CardModel card)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var query = "INSERT INTO Card (Name, State, StateId, DatePicker, Uploadfile, IsActive, Fileurl) VALUES (@Name, @State, @StateId, @DatePicker, @Uploadfile, @IsActive, @Fileurl)";
                var parameters = new
                {
                    card.Name,
                    card.State,
                    card.StateId,
                    DatePicker = card.DatePicker.ToDateTime(new TimeOnly(0, 0)),
                    card.Uploadfile,
                    card.Fileurl,
                    card.IsActive
                };
                return await connection.ExecuteAsync(query, parameters);
            }
        }

        public async Task<int> UpdateCardAsync(CardModel card)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var query = "UPDATE Card SET Name = @Name, StateId = @StateId, DatePicker = @DatePicker, Uploadfile = @Uploadfile, Fileurl = @Fileurl WHERE Id = @Id";
                var parameters = new
                {
                    card.Name,
                    card.State, 
                    card.StateId, 
                    DatePicker = card.DatePicker.ToDateTime(new TimeOnly(0, 0)),
                    card.Uploadfile,
                    card.Fileurl,
                    card.Id
                };
                return await connection.ExecuteAsync(query, parameters);
            }
        }

        public async Task<int> DeleteCardAsync(int id)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var query = "UPDATE Card SET IsActive = 0 WHERE Id = @Id";
                return await connection.ExecuteAsync(query, new { Id = id });
            }
        }
  
    }
}


